'==============================================================================
'   Description : ユーザプログラム用固有ファンクション
'
'　 2012/11/16 First Written by N.Arata(OLFT)
'
'==============================================================================
Option Strict Off
Option Explicit On

Imports System
Imports System.Drawing.Printing
Imports System.IO
Imports System.Text

Module UserSub
    Private bStartCheck As Boolean          ' データ設定確認が必要な時　Trueとする。
    Private dInitialResValue As Double      ' 初期測定値
    Private dStandardResValue As Double     ' 標準抵抗測定値
    Private lResCounterForPrinter As Long   ' 印刷用素子カウンタ

    Private intTMM_Save As Integer          ' 保存用　モード(0:高速(コンパレータ非積分モード), 1:高精度(積分モード))
    Private intMType_Save As Integer        ' 保存用　測定種別(0=内部測定, 1=外部測定)
    Private dTRV As Double                  ' 目標抵抗値
    Private bOkJudge As Boolean             ' 素子単位のNG判定
    Private bSkip As Boolean                ' ネットワーク抵抗のスキップ
    Private sResistorPrintData(MAX_RES_USER) As String    ' ネットワーク抵抗の時の出力データ

    Public Printer As New cPrintDocument    ' ﾌﾟﾘﾝﾀｰｵﾌﾞｼﾞｪｸﾄ
    '===============================================================================
    ' 印刷用データ領域
    '===============================================================================
    Private Const cTRIM_PRINT_DATA_HEAD As String = "C:\TRIMDATA\PRINTDATA\TRIM_PRINT_DATA_HEAD.TXT"
    Private Const cTRIM_PRINT_DATA_RES As String = "C:\TRIMDATA\PRINTDATA\TRIM_PRINT_DATA_RES.TXT"
    Private Const cTRIM_PRINT_DATA_PLATE As String = "C:\TRIMDATA\PRINTDATA\TRIM_PRINT_DATA_PLATE.TXT"
    Private Const cTRIM_PRINT_DATA_END As String = "C:\TRIMDATA\PRINTDATA\TRIM_PRINT_DATA_END.TXT"

    '''===============================================================================
    ''' <summary>
    ''' 印刷用素子カウンタのリセット
    ''' </summary>
    ''' <remarks></remarks>
    '''===============================================================================
    Public Sub ResetlResCounterForPrinter()
        lResCounterForPrinter = 0
    End Sub

    '===============================================================================
    '【機　能】 抵抗温度係数の算出
    '【引　数】 スタンダード抵抗値０℃、スタンダード抵抗値２５℃
    '【戻り値】 抵抗温度係数
    '===============================================================================
    Public Function GetResTempCoff(ByVal dStandardRes0 As Double, ByVal dStandardRes25 As Double) As Double
        GetResTempCoff = (dStandardRes25 - dStandardRes0) / dStandardRes0 * 10.0 ^ 6 / 25.0
    End Function

    '===============================================================================
    '【機　能】 ユーザ設定画面確認
    '【引　数】 true , false
    '【戻り値】 無し
    '===============================================================================
    Public Sub SetStartCheckStatus(ByVal bCheck As Boolean)
        bStartCheck = bCheck
    End Sub
    Public Function GetStartCheckStatus() As Boolean
        Return (bStartCheck)
    End Function

    '===============================================================================
    '【機　能】 標準抵抗値の抵抗値算出
    '【引　数】 抵抗番号,カット番号
    '【戻り値】 目標抵抗値
    '===============================================================================
    Public Function CalcStandardResistanceValue() As Double

        'CalcStandardResistanceValue = stUserData.dStandardRes25
        CalcStandardResistanceValue = stUserData.dTemperatura0
        'CalcStandardResistanceValue=114.7290000

        ' A0023NI.BAS の プログラムの場合
        ' 21730  IF RTP%=2 THEN NT#=25:MSRV#=SRV# ELSE NT#=0:MSRV#=SRV#*(1+SNTC#*NST#)
        'If stUserData.iTempTemp = 2 Then
        '    CalcStandardResistanceValue = stUserData.dStandardRes0
        'Else
        '    CalcStandardResistanceValue = stUserData.dStandardRes0 * (1.0 + stUserData.dResTempCoff * 25.0)
        'End If
    End Function

    '''===============================================================================
    ''' <summary>
    ''' スタンダード抵抗のチェック
    ''' </summary>
    ''' <returns>True:正常 False:スタンダード抵抗測定値異常</returns>
    ''' <remarks></remarks>
    '''===============================================================================
    Public Function StandardResistanceMeasure() As Boolean
        Dim rn As Integer = 1
        Dim Rtn As Short
        Dim dblMx As Double
        Dim strJUG As String
        Dim Judge As Integer                                            ' 判定結果'V2.0.0.0⑨

        Try

            Return (True)

            If Not UserSub.IsTrimType1() And Not UserSub.IsTrimType4() Then
                Return (True)
            End If

            If stREG(rn).intSLP <> SLP_RMES Then       ' 測定
                Return (True)
            End If
            stREG(rn).dblNOM = CalcStandardResistanceValue()    'V2.0.0.0①
            'V2.0.0.0①
            For i As Short = 1 To stPLT.RCount
                If stREG(i).intSLP = SLP_RMES Then             ' 抵抗測定のみ
                    stREG(i).dblNOM = CalcStandardResistanceValue()    'V2.0.0.0①
                End If
            Next
            'V2.0.0.0①
            Call DScanModeResetSet(rn, 0, 0)                             ' DCスキャナに接続する測定器を切替る 
            Rtn = V_R_MEAS(stREG(rn).intSLP, stREG(rn).intMType, dblMx, rn, stREG(rn).dblNOM)
            If (Rtn <> cFRS_NORMAL) Then
                Call Z_PRINT("スタンダード抵抗が測定できません" & vbCrLf)
                Return (False)
            Else
                'V2.0.0.0⑪↓
                dStandardResValue = dblMx
                Dim dAlpha As Double = stUserData.dAlpha / 10.0 ^ 6
                Dim dBeta As Double = stUserData.dBeta / 10.0 ^ 6
                Dim rnno As Short
                For rnno = 1 To stPLT.RCount
                    If UserModule.IsCutResistor(rnno) Then
                        Exit For
                    End If
                Next
                'ステージ温度換算計算式=(-α+SQRT(α^2-4*β*(1-STD実測値/STD0℃抵抗値)))/(2*β)
                Dim dStageTempConv As Double = (-1.0 * dAlpha + Math.Sqrt(dAlpha ^ 2 - 4.0 * dBeta * (1.0 - dStandardResValue / stUserData.dTemperatura0))) / (2 * dBeta)
                DebugLogOut("ステージ温度[" & dStageTempConv.ToString & "]= (-1.0 * " & dAlpha.ToString & " + Sqrt(" & dAlpha.ToString & " ^ 2 - 4.0 * " & dBeta.ToString & " * (1.0 - " & dStandardResValue.ToString & " / " & stUserData.dTemperatura0.ToString & "))) / (2 * " & dBeta.ToString & ")")

                'センサー計算式(＝トリミング時の目標値) = (設定抵抗値 / (1 + α * 設定温度 + β * 設定温度 ^ 2)) * (1 + α * ステージ温度 + β * ステージ温度 ^ 2)
                dTRV = (stREG(rnno).dblNOM / (1 + dAlpha * stUserData.iTempTemp + dBeta * stUserData.iTempTemp ^ 2)) * (1 + dAlpha * dStageTempConv + dBeta * dStageTempConv ^ 2)
                DebugLogOut("TRV[" & dTRV.ToString & "] = (" & stREG(rn).dblNOM.ToString & " / (1 + " & dAlpha.ToString & " * " & stUserData.iTempTemp.ToString & " + " & dBeta.ToString & " * " & stUserData.iTempTemp.ToString & "^ 2)) * (1 + " & dAlpha.ToString & " * " & dStageTempConv.ToString & " + " & dBeta.ToString & "*" & dStageTempConv.ToString & " ^ 2)")
                'V2.0.0.0⑪↑



                ' 目標値判定処理(FT)
                strJUG = Test_ItFt(1, stREG(rn).intMode, dblMx, stREG(rn).dblNOM, stREG(rn).dblITL, stREG(rn).dblITH, Judge)    'V2.0.0.0⑨Judge追加
                If (strJUG <> JG_OK) Then                           ' FT-NG ?
                    Call Z_PRINT("スタンダード抵抗を確認してください 測定値 ＝ " & dblMx.ToString("0.00000") & "Ω" & vbCrLf)
                    Return (False)
                Else
                    Return (True)
                End If
            End If

        Catch ex As Exception
            Call Z_PRINT("UserSub.StandardResistanceMeasure() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try

    End Function

    '''===============================================================================
    ''' <summary>
    ''' 目標値の取得
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    '''===============================================================================
    Public Function GetTRV() As Double
        Return (dTRV)
    End Function

    '===============================================================================
    '【機　能】 目標値算出
    '【引　数】 抵抗番号,カット番号
    '【戻り値】 目標抵抗値
    '===============================================================================
    Public Sub CalcTargeResistancetValue(ByVal rn As Integer)

        Try
            If IsTrimType1() Or UserSub.IsTrimType4() Then  'V2.0.0.0①sTrimType4()追加

#If OLD_CALURATION Then 'V2.0.0.0⑪
                ' 温度センサーの場合　　　　　　　：　TRV　＝　スタンダード実測値 ／ スタンダード（０℃or２５℃）
                If stUserData.iTempTemp = 1 Then        ' 参照温度	１：０℃
                    dTRV = dStandardResValue / stUserData.dStandardRes0 * stREG(rn).dblNOM
                    DebugLogOut("TRV:" & dTRV.ToString & " = " & dStandardResValue.ToString & " / " & stUserData.dStandardRes0.ToString & " * " & stREG(rn).dblNOM.ToString)
                Else                                    ' 参照温度	２：２５℃
                    dTRV = dStandardResValue / stUserData.dStandardRes25 * stREG(rn).dblNOM
                    DebugLogOut("TRV:" & dTRV.ToString & " = " & dStandardResValue.ToString & " / " & stUserData.dStandardRes25.ToString & " * " & stREG(rn).dblNOM.ToString)
                End If
#Else
                Dim dAlpha As Double = stUserData.dAlpha / 10.0 ^ 6
                Dim dBeta As Double = stUserData.dBeta / 10.0 ^ 6
                'ステージ温度換算計算式=(-α+SQRT(α^2-4*β*(1-STD実測値/STD0℃抵抗値)))/(2*β)
                Dim dStageTempConv As Double = (-1.0 * dAlpha + Math.Sqrt(dAlpha ^ 2 - 4.0 * dBeta * (1.0 - dStandardResValue / stUserData.dTemperatura0))) / (2 * dBeta)
                DebugLogOut("ステージ温度[" & dStageTempConv.ToString & "]= (-1.0 * " & dAlpha.ToString & " + Sqrt(" & dAlpha.ToString & " ^ 2 - 4.0 * " & dBeta.ToString & " * (1.0 - " & dStandardResValue.ToString & " / " & stUserData.dTemperatura0.ToString & "))) / (2 * " & dBeta.ToString & ")")

                'センサー計算式(＝トリミング時の目標値) = (設定抵抗値 / (1 + α * 設定温度 + β * 設定温度 ^ 2)) * (1 + α * ステージ温度 + β * ステージ温度 ^ 2)
                dTRV = (stREG(rn).dblNOM / (1 + dAlpha * stUserData.iTempTemp + dBeta * stUserData.iTempTemp ^ 2)) * (1 + dAlpha * dStageTempConv + dBeta * dStageTempConv ^ 2)
                DebugLogOut("TRV[" & dTRV.ToString & "] = (" & stREG(rn).dblNOM.ToString & " / (1 + " & dAlpha.ToString & " * " & stUserData.iTempTemp.ToString & " + " & dBeta.ToString & " * " & stUserData.iTempTemp.ToString & "^ 2)) * (1 + " & dAlpha.ToString & " * " & dStageTempConv.ToString & " + " & dBeta.ToString & "*" & dStageTempConv.ToString & " ^ 2)")
#End If


            ElseIf IsTrimType2() Or IsTrimType3() Then  'V1.0.4.3④IsTrimType3()追加

                'V1.2.0.0②↓
                Dim ResCnt As Short
                'V2.0.0.0⑩                If UserSub.IsTrimType3() Then
                'V2.0.0.0⑩                ResCnt = 1                  ' チップ抵抗モードは１番目だけ使用する。
                'V2.0.0.0⑩            Else
                ResCnt = rn
                'V2.0.0.0⑩            End If
                'V1.2.0.0②↑

                ' 高精度薄膜抵抗トリミングの場合　：　TRV　＝　目標抵抗値 × 補正値
                'V2.0.0.0⑫                dTRV = stREG(rn).dblNOM * stUserData.dNomCalcCoff(ResCnt)
                dTRV = stREG(rn).dblNOM * (stUserData.dNomCalcCoff(UserSub.GetResNumberInCircuit(ResCnt)) / 1000000.0 + 1.0)                   'V2.0.0.0⑫ 補正値の項目をppm入力に変更 'V2.0.0.0⑩サーキット対応
                DebugLogOut("TRV:" & dTRV.ToString & " = " & stREG(rn).dblNOM.ToString & " * " & stUserData.dNomCalcCoff(UserSub.GetResNumberInCircuit(ResCnt)))
                'V1.2.0.0②                dTRV = stREG(rn).dblNOM * stUserData.dNomCalcCoff(rn)
                'V1.2.0.0②                DebugLogOut("TRV:" & dTRV.ToString & " = " & stREG(rn).dblNOM.ToString & " * " & stUserData.dNomCalcCoff(rn))

            Else
                Call Z_PRINT("UserSub.CalcTargeResistancetValue() ERROR 標準トリミングで呼ばれました = " & vbCrLf)
            End If

        Catch ex As Exception
            Call Z_PRINT("UserSub.CalcTargeResistancetValue() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Sub

    '===============================================================================
    '【機　能】 各カットの目標値算出
    '【引　数】 抵抗番号,カット番号
    '【戻り値】 目標抵抗値
    '===============================================================================
    Public Function GetTargeResistancetValue(ByVal rn As Integer, ByVal cn As Integer) As Double

        Try
            If IsTrimType1() Or IsTrimType4() Then

                ' 目標値（TRM)　＝　TRV　－　（カット毎のオフセット値　×　初期測定値　／　目標値算出係数　）
                GetTargeResistancetValue = dTRV - (stREG(rn).STCUT(cn).dblCOF * dInitialResValue / stUserData.dTargetCoff(UserBas.GetResistorNo(rn)))
                DebugLogOut("抵抗[" & rn.ToString & "]カット[" & cn.ToString & "]目標値:" & GetTargeResistancetValue.ToString & " = " & dTRV.ToString & " - (" & stREG(rn).STCUT(cn).dblCOF.ToString & " * " & dInitialResValue.ToString & " / " & stUserData.dTargetCoff(UserBas.GetResistorNo(rn)).ToString & ")")

            ElseIf IsTrimType2() Or IsTrimType3() Then  'V1.0.4.3④IsTrimType3()追加

                'V1.2.0.0②↓
                Dim ResCnt As Short
                'V2.0.0.0⑩                If UserSub.IsTrimType3() Then
                'V2.0.0.0⑩                    ResCnt = 1                  ' チップ抵抗モードは１番目だけ使用する。
                'V2.0.0.0⑩                Else
                ResCnt = rn
                'V2.0.0.0⑩                End If
                'V1.2.0.0②↑

                ' 目標値（TRM)　＝　TRV　－　（カット毎のオフセット値　×　初期測定値　／　目標値算出係数　）
                'V2.0.0.0⑩                GetTargeResistancetValue = dTRV - (stREG(rn).STCUT(cn).dblCOF * dInitialResValue / stUserData.dTargetCoff(ResCnt))
                GetTargeResistancetValue = dTRV - (stREG(rn).STCUT(cn).dblCOF * dInitialResValue / stUserData.dTargetCoff(UserSub.GetResNumberInCircuit(ResCnt)))       'V2.0.0.0⑩ UserSub.GetResNumberInCircuit(ResCnt)追加
                DebugLogOut("抵抗[" & rn.ToString & "]カット[" & cn.ToString & "]目標値:" & GetTargeResistancetValue.ToString & " = " & dTRV.ToString & " - (" & stREG(rn).STCUT(cn).dblCOF.ToString & " * " & dInitialResValue.ToString & " / " & stUserData.dTargetCoff(UserSub.GetResNumberInCircuit(ResCnt)).ToString & ")")
                'V1.2.0.0②                GetTargeResistancetValue = dTRV - (stREG(rn).STCUT(cn).dblCOF * dInitialResValue / stUserData.dTargetCoff(rn))
                'V1.2.0.0②                DebugLogOut("抵抗[" & rn.ToString & "]カット[" & cn.ToString & "]目標値:" & GetTargeResistancetValue.ToString & " = " & dTRV.ToString & " - (" & stREG(rn).STCUT(cn).dblCOF.ToString & " * " & dInitialResValue.ToString & " / " & stUserData.dTargetCoff(rn).ToString & ")")

            Else
                Call Z_PRINT("UserSub.GetTargeResistancetValue() ERROR 標準トリミングで呼ばれました = " & vbCrLf)
            End If

        Catch ex As Exception
            Call Z_PRINT("UserSub.GetTargeResistancetValue() TRAP ERROR = " & ex.Message & vbCrLf)
            GetTargeResistancetValue = -9999.999
        End Try
    End Function

    '===============================================================================
    '【機　能】 抵抗測定、高速、高精度測定の変更
    '【引　数】 抵抗番号,カット番号
    '【戻り値】 無し
    '===============================================================================
    Public Sub ChangeMeasureSpeed(ByVal rn As Integer, ByVal cn As Integer, ByVal idx As Short)

        Try
            intTMM_Save = stREG(rn).STCUT(cn).intIXTMM(idx)         ' 測定モード(0:高速　1:高精度)
            intMType_Save = stREG(rn).STCUT(cn).intIXMType(idx)     ' 測定機器0～5(0:内部測定　1～:外部機器)

            If stUserData.iTrimSpeed = 1 Then                       ' 高速
                stREG(rn).STCUT(cn).intIXTMM(idx) = 0               ' モード(0:高速(コンパレータ非積分モード), 1:高精度(積分モード))　※インデックス時使用する。
                stREG(rn).STCUT(cn).intIXMType(idx) = 0             ' 測定種別(0=内部測定, 1=外部測定)
            ElseIf stUserData.iTrimSpeed = 2 Then                   ' 高精度
                'V1.2.0.0②↓
                Dim ResCnt As Short
                'V2.0.0.0⑩                If UserSub.IsTrimType3() Then
                'V2.0.0.0⑩                    ResCnt = 1                  ' チップ抵抗モードは１番目だけ使用する。
                'V2.0.0.0⑩                Else
                ResCnt = rn
                'V2.0.0.0⑩                End If
                If cn < stUserData.iChangeSpeed(GetResistorNo(ResCnt)) Then
                    'V1.2.0.0②↑
                    'V1.2.0.0②                    If cn < stUserData.iChangeSpeed(GetResistorNo(rn)) Then
                    stREG(rn).STCUT(cn).intIXTMM(idx) = 0           ' モード(0:高速(コンパレータ非積分モード), 1:高精度(積分モード))　※インデックス時使用する。
                    stREG(rn).STCUT(cn).intIXMType(idx) = 0         ' 測定種別(0=内部測定, 1=外部測定)
                End If
            Else
                Exit Sub
            End If
        Catch ex As Exception
            Call Z_PRINT("UserSub.ChangeMeasureSpeed() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try

    End Sub
    '===============================================================================
    '【機　能】 抵抗測定、高速、高精度測定モードの復元
    '【引　数】 抵抗番号,カット番号
    '【戻り値】 無し
    '===============================================================================
    Public Sub ResoreMeasureSpeed(ByVal rn As Integer, ByVal cn As Integer, ByVal idx As Short)
        Try
            stREG(rn).STCUT(cn).intIXTMM(idx) = intTMM_Save        ' モードの保存
            stREG(rn).STCUT(cn).intIXMType(idx) = intMType_Save    ' 測定種別の保存
        Catch ex As Exception
            Call Z_PRINT("UserSub.ResoreMeasureSpeed() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Sub

    '===============================================================================
    '【機　能】 温度センサータイプかを判断する
    '【引　数】 無し
    '【戻り値】 True = 一致, False = 不一致
    '===============================================================================
    Public Function IsTrimType1() As Boolean
        If stUserData.iTrimType = 1 Then
            IsTrimType1 = True
        Else
            IsTrimType1 = False
        End If
    End Function
    '===============================================================================
    '【機　能】 抵抗トリミングタイプかを判断する
    '【引　数】 無し
    '【戻り値】 True = 一致, False = 不一致
    '===============================================================================
    Public Function IsTrimType2() As Boolean
        If stUserData.iTrimType = 2 Then
            IsTrimType2 = True
        Else
            IsTrimType2 = False
        End If
    End Function
    'V1.0.4.3④ ADD START
    '===============================================================================
    '【機　能】 チップ抵抗トリミングタイプかを判断する
    '【引　数】 無し
    '【戻り値】 True = 一致, False = 不一致
    '===============================================================================
    Public Function IsTrimType3() As Boolean
        If stUserData.iTrimType = 3 Then
            IsTrimType3 = True
        Else
            IsTrimType3 = False
        End If
    End Function
    'V1.0.4.3④ ADD END
    'V2.0.0.0① ADD START
    '===============================================================================
    '【機　能】 チップ温度センサータイプかを判断する
    '【引　数】 無し
    '【戻り値】 True = 一致, False = 不一致
    '===============================================================================
    Public Function IsTrimType4() As Boolean
        If stUserData.iTrimType = 4 Then
            IsTrimType4 = True
        Else
            IsTrimType4 = False
        End If
    End Function

    ' ''' <summary>
    ' ''' チップタイプかを判断する
    ' ''' </summary>
    ' ''' <returns></returns>
    ' ''' <remarks></remarks>
    'Public Function IsCircuitTrimType() As Boolean
    '    '20171207佐々木様と相談してチップ抵抗トリミングタイプのみに適用　If stUserData.iTrimType = 3 Or stUserData.iTrimType = 4 Then
    '    If stUserData.iTrimType = 3 Then
    '        IsCircuitTrimType = True
    '    Else
    '        IsCircuitTrimType = False
    '    End If
    'End Function
    'V2.0.0.0① ADD END
    '===============================================================================
    '【機　能】 特殊処理のトリミングタイプかを判断する
    '【引　数】 無し
    '【戻り値】 True = 一致, False = 不一致
    '===============================================================================
    Public Function IsSpecialTrimType() As Boolean
        If stUserData.iTrimType <> 0 Then
            IsSpecialTrimType = True
        Else
            IsSpecialTrimType = False
        End If
    End Function
    '===============================================================================
    '【機　能】 初期測定値の保存
    '【引　数】 初期測定値
    '【戻り値】 無し
    '===============================================================================
    Public Sub SetInitialResValue(ByVal dVal As Double)
        dInitialResValue = dVal
    End Sub
    '===============================================================================
    '【機　能】 標準抵抗測定値の保存
    '【引　数】 標準抵抗測定値
    '【戻り値】 無し
    '===============================================================================
    Public Sub SetStandardResValue(ByVal dVal As Double)
        dStandardResValue = dVal
    End Sub

    '===============================================================================
    '【機　能】 ファイナル測定後の処理
    '【引　数】 抵抗番号,ファイナルテスト測定値
    '【戻り値】 無し
    '===============================================================================
    Public Sub DevCalculation(ByVal rn As Integer, ByVal dFtVal As Double)
        Dim iResNo As Integer
        Try


            iResNo = GetResistorNo(rn)      ' トリミングデータ上の抵抗番号からカットする抵抗番号を求める。（測定のみを除外する。）

            'V1.2.0.0②↓
            'V2.0.0.0⑩            If UserSub.IsTrimType3() Then
            'V2.0.0.0⑩                iResNo = 1
            'V2.0.0.0⑩            End If
            'V1.2.0.0②↑

            If iResNo > MAX_RES_USER Then
                Return
            End If

            stUserData.dFtVal(iResNo) = dFtVal

            '14710      DEV1#=FIX((R.FT1#-NRV1#)/NRV1#*1000000#)
            '14832      DEV2#=FIX((R.FT2#-NRV2#)/NRV2#*1000000#)

            If stREG(rn).dblNOM = 0.0 Then
                Call Z_PRINT("UserSub.DevCalculation() 目標値が０です。計算が出来ません" & vbCrLf)
                Exit Sub
            End If
            ' トリミング誤差　＝　（　トリミング値　－　スタンダード実測値に対してのトリミング目標値　）／スタンダード実測値に対してのトリミング目標値　* 10^6
            stUserData.dDev(iResNo) = FNDEVP(stUserData.dFtVal(iResNo), stREG(rn).dblNOM)

        Catch ex As Exception
            Call Z_PRINT("UserSub.DevCalculation() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Sub

    '''===============================================================================
    ''' <summary>
    ''' ロット交換の可否確認
    ''' </summary>
    ''' <param name="HostMode">ローダモード(cHOSTcMODEcMANUAL:手動 cHOSTcMODEcAUTO:自動)</param>
    ''' <param name="Start">cHSTcTRMCMD：トリミングスタート　cHSTcLOTCHANGE：ロット交換スタート</param>
    ''' <returns>0：ロット交換無し 1:枚数到達のロット交換 2:切り替え信号のロット交換</returns>
    ''' <remarks></remarks>
    '''===============================================================================
    Public Function IsLotChange(ByVal HostMode As Integer, ByVal Start As Short, ByVal fStartTrim As Boolean) As Integer

        Dim bPrint As Boolean = False

        IsLotChange = 0

        'If Start <> cHSTcTRMCMD And Start <> cHSTcLOTCHANGE Then
        '    Exit Function
        'End If


        Select Case (stUserData.iLotChange) ' ロット終了条件 0:終了条件判定無し 1:枚数 2:ローダー信号 3:両方
            Case 0
                IsLotChange = 0
            Case 1
                If stCounter.PlateCounter >= stUserData.lLotEndSL Then      ' 処理基板数に到達
                    If fStartTrim Then
                        IsLotChange = 1
                    End If
                    If Not UserBas.stCounter.LotPrint Then                  'V1.2.0.3
                        bPrint = True
                    End If                                                  'V1.2.0.3
                End If
            Case 2
                If fStartTrim And HostMode = cHOSTcMODEcAUTO And Start = cHSTcLOTCHANGE Then
                    IsLotChange = 2
                    bPrint = True
                End If
            Case 3
                If fStartTrim And HostMode = cHOSTcMODEcAUTO And Start = cHSTcLOTCHANGE Then
                    IsLotChange = 2
                    bPrint = True
                Else
                    If stCounter.PlateCounter >= stUserData.lLotEndSL Then      ' 処理基板数に到達
                        If fStartTrim Then
                            IsLotChange = 1
                        End If
                        If Not UserBas.stCounter.LotPrint Then                  'V1.2.0.3
                            bPrint = True
                        End If                                                  'V1.2.0.3
                    End If
                End If
        End Select

        'V1.2.0.0⑥        If bPrint And Not UserBas.stCounter.LotPrint Then
        If bPrint Then
            Call UserSub.LotEnd()                           ' ロット終了時のデータ出力
            Call Printer.Print(False)                       ' ロット情報印刷
            UserBas.stCounter.LotPrint = True               ' ロット終了時の印刷実行済みでTrue
        End If

    End Function

    '===============================================================================
    '【機　能】 印刷ヘッダ情報ファイルの作成、既存ファイルの削除も行う
    '【引　数】 無し
    '【戻り値】 無し
    '===============================================================================
    Public Sub MakePrintFileHeader()
        Dim WS As IO.StreamWriter
        Dim sData As String


        Try
            UserBas.stCounter.LotPrint = False              'V1.2.0.3 念の為追加
            ' 印刷データを削除する。
            If IO.File.Exists(cTRIM_PRINT_DATA_HEAD) = True Then
                IO.File.Delete(cTRIM_PRINT_DATA_HEAD)
            End If

            If IO.File.Exists(cTRIM_PRINT_DATA_RES) = True Then
                IO.File.Delete(cTRIM_PRINT_DATA_RES)
            End If
            If IO.File.Exists(cTRIM_PRINT_DATA_PLATE) = True Then
                IO.File.Delete(cTRIM_PRINT_DATA_PLATE)
            End If
            If IO.File.Exists(cTRIM_PRINT_DATA_END) = True Then
                IO.File.Delete(cTRIM_PRINT_DATA_END)
            End If

            ' ヘッダー情報を出力する。
            WS = New IO.StreamWriter(cTRIM_PRINT_DATA_HEAD, True, System.Text.Encoding.GetEncoding("Shift-JIS"))
            WS.WriteLine("───────────────────────────────────────────────")
            WS.WriteLine("日付  " & DateTime.Now.ToString("yyyy/MM/dd"))
            WS.WriteLine("ロットＮｏ．      ＝ " & stUserData.sLotNumber.PadRight(20) & "オペレータ名     ＝ " & stUserData.sOperator)
            WS.WriteLine("パターンＮｏ．    ＝ " & stUserData.sPatternNo.PadRight(20) & "プログラムＮｏ． ＝ " & stUserData.sProgramNo)

            If UserSub.IsTrimType1() Or UserSub.IsTrimType4() Then       ' 温度センサー'V2.0.0.0①sTrimType4()追加
                WS.WriteLine("Ｒ１:設定抵抗値             ＝ " & stREG(UserBas.GetCutResistorNo(1)).dblNOM.ToString("0.00000").PadLeft(15) & " [ohm]")
#If OLD_CALURATION Then 'V2.0.0.0⑪
                WS.WriteLine("スタンダード抵抗値（０℃）  ＝ " & stUserData.dStandardRes0.ToString("0.00000").PadLeft(15) & " [ohm]")
                WS.WriteLine("スタンダード抵抗値（２５℃）＝ " & stUserData.dStandardRes25.ToString("0.00000").PadLeft(15) & " [ohm]")
                If stUserData.iTempTemp = 1 Then    ' 参照温度	１：０℃ または ２：２５℃
                    WS.WriteLine("参照温度　　　　　　　　　　＝０℃")
                ElseIf stUserData.iTempTemp = 2 Then
                    WS.WriteLine("参照温度　　　　　　　　　　＝２５℃")
                End If
#Else
                Dim dStdResValue As Double = stUserData.dTemperatura0 * (1.0 + stUserData.dAlpha * stUserData.iTempTemp + stUserData.dBeta * stUserData.iTempTemp ^ 2)
                WS.WriteLine("STD抵抗値（" & stUserData.iTempTemp.ToString("0") & "℃）  ＝ " & dStdResValue.ToString("0.00000").PadLeft(15) & " [ohm]")
#End If
                WS.WriteLine("ファイナルテストリミット[ppm] High ＝ " & stUserData.dFinalLimitHigh.ToString("0.0").PadLeft(10) & "  Low　＝ " & stUserData.dFinalLimitLow.ToString("0.0").PadLeft(10))
            Else                        ' 抵抗トリミング
                If stUserData.iTrimSpeed = 1 Then
                    sData = "トリミングモード     ＝ 高速度モード"
                ElseIf stUserData.iTrimSpeed = 2 Then
                    sData = "トリミングモード     ＝ 高精度モード"
                Else
                    sData = "トリミングモード     ＝ 設定値"
                End If
                WS.WriteLine(sData)

                Dim Rcnt As Integer = UserBas.GetRCountExceptMeasure()

                For rn As Integer = 1 To Rcnt
                    WS.WriteLine("R" & rn.ToString & ":設定抵抗値     ＝ " & stREG(UserBas.GetCutResistorNo(rn)).dblNOM.ToString("0.00000").PadLeft(15) & " [ohm]")
                    'V2.0.0.0⑩                    If IsTrimType3() Then           'V1.2.0.0②
                    'V2.0.0.0⑩                        Exit For                    'V1.2.0.0②
                    'V2.0.0.0⑩                    End If                          'V1.2.0.0②
                Next
                For rn As Integer = 1 To Rcnt
                    WS.WriteLine("R" & rn.ToString & ":補正値         ＝ " & stUserData.dNomCalcCoff(rn).ToString("0.000").PadLeft(15) & " [ppm]") 'V2.0.0.0⑫補正値の項目をppm入力に変更
                    'V2.0.0.0⑩                    If IsTrimType3() Then           'V1.2.0.0②
                    'V2.0.0.0⑩                        Exit For                    'V1.2.0.0②
                    'V2.0.0.0⑩                    End If                          'V1.2.0.0②
                Next
                WS.WriteLine("ファイナルテストリミット[ppm] High ＝ " & stUserData.dFinalLimitHigh.ToString("0.0").PadLeft(10) & "  Low　＝ " & stUserData.dFinalLimitLow.ToString("0.0").PadLeft(10))
                'V2.0.0.0⑩                If IsTrimType2() Then               'V1.2.0.0②
                WS.WriteLine("相対値リミット[ppm]              ＝ " & stUserData.dRelativeHigh.ToString("0.000").PadLeft(10))
                'V2.0.0.0⑩            End If                              'V1.2.0.0②
            End If
            WS.WriteLine("───────────────────────────────────────────────")

            WS.Close()

        Catch ex As Exception
            Call Z_PRINT("UserSub.MakePrintFileHeader() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try

    End Sub
    '===============================================================================
    '【機　能】 素子単位のファイル又はログの出力
    '【引　数】 IO.StreamWriter、文字データ
    '【戻り値】 無し
    '===============================================================================
    Private Sub ResistorDataOutPut(ByVal WS As IO.StreamWriter, ByVal bPrint As Boolean, ByVal sMessage As String)

        If lResCounterForPrinter < stUserData.lPrintRes And bPrint Then ' ロット終了時印刷素子数に達していない場合は、ファイルへの出力
            WS.WriteLine(sMessage)
        End If

        Call Z_PRINT(sMessage.Replace(vbTab, " ") & vbCrLf)         ' ログ出力エリアへの出力

    End Sub
    '''=============================================================================
    ''' <summary>
    ''' 素子単位の判定NG化
    ''' </summary>
    ''' <remarks></remarks>
    '''=============================================================================
    Public Sub NgJudgeSet()
        bOkJudge = False
    End Sub

    Public Sub SkipSet()
        bSkip = True
    End Sub
    '''=============================================================================
    ''' <summary>
    ''' 素子単位の判定初期化
    ''' </summary>
    ''' <remarks></remarks>
    '''=============================================================================
    Public Sub NgJudgeReset()
        For i As Integer = 1 To MAX_RES_USER
            sResistorPrintData(i) = ""
        Next
        bOkJudge = True
        bSkip = False
    End Sub

    '===============================================================================
    '【機　能】 全抵抗終了時の判定
    '【引　数】 抵抗番号
    '【戻り値】 無し
    '===============================================================================
    Public Function FinalJudge(ByVal rn As Integer) As Boolean
        Dim WS As IO.StreamWriter
        Dim dDev As Double
        Dim sJudge As String
        Dim iResCnt As Integer
        Dim bHeaderPrint As Boolean
        Dim iCnt As Integer

        ' 14840       DEV#=DEV1#-DEV2#
        ' 14841       IF ECF%<>1 THEN FTOV3#=FTOV3#+1#: GOTO *TRIM.NG
        ' 14842       CALL TEST%(DEV#,SRV#,Z2,STLO#,STHI#)
        ' 14843       IF ECF%=2 THEN FTLO3#=FTLO3#+1#:  GOTO *TRIM.NG
        ' 14844       IF ECF%=3 THEN FTHI3#=FTHI3#+1#:  GOTO *TRIM.NG

        'V2.0.0.0⑤ 全ての"0.00000"をTARGET_DIGIT_DEFINEへ変更
        'V2.0.0.0⑤　PadLeft(13)をPadLeft(15)へ変更

        Try
            If IO.File.Exists(cTRIM_PRINT_DATA_RES) Then
                bHeaderPrint = False
            Else
                bHeaderPrint = True
            End If

            FinalJudge = True


            iResCnt = GetRCountExceptMeasure()
            If iResCnt > MAX_RES_USER Then
                iResCnt = MAX_RES_USER
            End If

            'V1.2.0.0②↓
            'V2.0.0.0⑩            If UserSub.IsTrimType3() Then
            'V2.0.0.0⑩                iResCnt = 1
            'V2.0.0.0⑩            End If
            'V1.2.0.0②↑

            WS = New IO.StreamWriter(cTRIM_PRINT_DATA_RES, True, System.Text.Encoding.GetEncoding("Shift-JIS"))     ' 抵抗データ印刷データ
            If bHeaderPrint Then
                If UserSub.IsTrimType1 Or UserSub.IsTrimType4() Then    'V2.0.0.0①sTrimType4()追加
                    ResistorDataOutPut(WS, True, "No" & vbTab & "X" & vbTab & "Y" & vbTab & "抵抗名" & vbTab & "目標抵抗値 イニシャル測定値 ファイナル測定値 誤差  判定")
                Else
                    ResistorDataOutPut(WS, True, "No" & vbTab & "X" & vbTab & "Y" & vbTab & "抵抗名" & vbTab & "イニシャル測定値   ファイナル測定値   誤差   判定")
                End If
            End If
            If (stREG(rn).intMode = 0) Then                         ' 判定モード = 0(比率(ppm)) ?
                dDev = FNDEVP(dblVX(2), dblNM(2))                ' 誤差 = (測定値 / 目標値 - 1) * 100
            Else
                dDev = dblVX(2) - dblNM(2)                       ' 誤差1(絶対値) = 測定値 - 目標値
            End If
            If UserSub.IsTrimType1 Or iResCnt = 1 Then                                     ' １素子１抵抗の時　２抵抗以上は、最後に出力
                If Not stREG(rn).bPattern Then                  'V1.2.0.0③ カット位置補正の判定 True：OK False:NG
                    sResistorPrintData(1) = stCounter.PlateCounter.ToString(0) & vbTab & stCounter.BlockCntX.ToString(0) & vbTab & stCounter.BlockCntY.ToString(0) & vbTab & stREG(rn).strRNO & "   " & vbTab & "カット位置補正 自動ＮＧ判定 = ＮＧ"
                ElseIf UserSub.IsTrimType1 Then
                    sResistorPrintData(1) = stCounter.PlateCounter.ToString(0) & vbTab & stCounter.BlockCntX.ToString(0) & vbTab & stCounter.BlockCntY.ToString(0) & vbTab & stREG(rn).strRNO & vbTab & dblNM(2).ToString(TARGET_DIGIT_DEFINE).PadLeft(15) & " " & UserSub.ChangeOverFlow(dblVX(1).ToString(TARGET_DIGIT_DEFINE)).PadLeft(15) & " " & UserSub.ChangeOverFlow(dblVX(2).ToString(TARGET_DIGIT_DEFINE)).PadLeft(15) & " " & UserSub.ChangeOverFlow(dDev.ToString("0.0")).PadLeft(15) & " " & strJUG(rn)
                Else
                    sResistorPrintData(1) = stCounter.PlateCounter.ToString(0) & vbTab & stCounter.BlockCntX.ToString(0) & vbTab & stCounter.BlockCntY.ToString(0) & vbTab & stREG(rn).strRNO & vbTab & UserSub.ChangeOverFlow(dblVX(1).ToString(TARGET_DIGIT_DEFINE)).PadLeft(15) & " " & UserSub.ChangeOverFlow(dblVX(2).ToString(TARGET_DIGIT_DEFINE)).PadLeft(15) & " " & UserSub.ChangeOverFlow(dDev.ToString("0.0")).PadLeft(15) & "  " & strJUG(rn)
                End If
                If strJUG(rn) = JG_OK Then
                    ResistorDataOutPut(WS, True, sResistorPrintData(1))
                    lResCounterForPrinter = lResCounterForPrinter + 1                       ' ＯＫのみ印刷してカウントアップする。
                    If UserSub.IsTrimType2 Then
                        stCounter.OK_Counter = stCounter.OK_Counter + 1
                        stCounter.Total_OK_Counter = stCounter.Total_OK_Counter + 1
                    End If
                Else
                    ResistorDataOutPut(WS, False, sResistorPrintData(1))
                End If
            Else
                iCnt = GetResistorNo(rn)
                If iCnt <= MAX_RES_USER Then
                    sResistorPrintData(iCnt) = stCounter.PlateCounter.ToString(0) & vbTab & stCounter.BlockCntX.ToString(0) & vbTab & stCounter.BlockCntY.ToString(0) & vbTab & stREG(rn).strRNO & vbTab & UserSub.ChangeOverFlow(dblVX(1).ToString(TARGET_DIGIT_DEFINE)).PadLeft(15) & " " & UserSub.ChangeOverFlow(dblVX(2).ToString(TARGET_DIGIT_DEFINE)).PadLeft(15) & " " & UserSub.ChangeOverFlow(dDev.ToString("0.0")).PadLeft(15) & "  " & strJUG(rn)
                    'V1.2.0.0③↓
                    If Not stREG(rn).bPattern Then                  'カット位置補正の判定 True：OK False:NG
                        sResistorPrintData(iCnt) = stCounter.PlateCounter.ToString(0) & vbTab & stCounter.BlockCntX.ToString(0) & vbTab & stCounter.BlockCntY.ToString(0) & vbTab & stREG(rn).strRNO & "   " & vbTab & "カット位置補正 自動ＮＧ判定 = ＮＧ"
                    End If
                    'V1.2.0.0③↑
                End If
            End If

            'V2.0.0.0⑩            If UserSub.IsTrimType2 Then
            If UserSub.IsTrimType2 Or UserSub.IsTrimType3() Then        'V2.0.0.0⑩チップ抵抗モード追加
                If iResCnt > 1 And GetResistorNo(rn) = iResCnt Then     ' 抵抗数１以上の時

                    Dim sMessage As String = ""
                    Dim largest As Double = Double.MinValue
                    Dim smallest As Double = Double.MaxValue
                    Dim i As Integer

                    If bSkip Then
                        dDev = -1000000.0
                    Else
                        For i = 1 To iResCnt Step 1
                            largest = Math.Max(largest, stUserData.dDev(i))
                            smallest = Math.Min(smallest, stUserData.dDev(i))
                        Next

                        ' 相対値　＝　最大値　－　最小値

                        dDev = Math.Abs(largest - smallest)
                        DebugLogOut("DEV =" & dDev.ToString(TARGET_DIGIT_DEFINE) & " L= " & largest.ToString(TARGET_DIGIT_DEFINE) & " M= " & smallest.ToString(TARGET_DIGIT_DEFINE))
                    End If


                    If dDev <= stUserData.dRelativeHigh And bOkJudge Then
                        stCounter.OK_Counter = stCounter.OK_Counter + 1
                        stCounter.Total_OK_Counter = stCounter.Total_OK_Counter + 1
                        sJudge = "OK"
                        For i = 1 To iResCnt Step 1
                            ResistorDataOutPut(WS, True, sResistorPrintData(i))
                        Next
                        sMessage = sMessage & "相対値[ppm] " & UserSub.ChangeOverFlow(dDev.ToString("0.0")) & vbTab & sJudge
                        ResistorDataOutPut(WS, True, sMessage)
                        lResCounterForPrinter = lResCounterForPrinter + 1                       ' ＯＫのみ印刷してカウントアップする。
                    Else
                        FinalJudge = False
                        sJudge = "NG"
                        For i = 1 To iResCnt Step 1
                            ResistorDataOutPut(WS, False, sResistorPrintData(i))
                        Next
                        sMessage = sMessage & "相対値[ppm] " & UserSub.ChangeOverFlow(dDev.ToString("0.0")) & vbTab & sJudge
                        ResistorDataOutPut(WS, False, sMessage)
                        If Not bSkip Then
                            stCounter.FTHigh = stCounter.FTHigh + 1
                            stCounter.Total_FTHigh = stCounter.Total_FTHigh + 1
                        End If
                    End If
                    NgJudgeReset()
                End If
            End If
            WS.Close()

            'V1.2.0.0②            If GetResistorNo(rn) = iResCnt Then
            'V2.0.0.0⑩            If GetResistorNo(rn) = iResCnt Or UserSub.IsTrimType3() Then    'V1.2.0.0② チップ抵抗モードは抵抗単位でカウントする。
            If GetResistorNo(rn) = iResCnt Then         'V2.0.0.0⑩
                stCounter.TrimCounter = stCounter.TrimCounter + 1 ' ﾄﾘﾐﾝｸﾞ数ｶｳﾝﾄｱｯﾌﾟ
                stCounter.Total_TrimCounter = stCounter.Total_TrimCounter + 1
            End If

            Call Set_NG_Counter()                       'V1.2.0.0③ NGカウンターの更新

        Catch ex As Exception
            Call Z_PRINT("UserSub.FinalJudge() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try

    End Function

    '===============================================================================
    '【機　能】 基板終了時の印刷処理を行う
    '【引　数】 無し
    '【戻り値】 無し
    '===============================================================================
    Public Sub SubstrateEnd()
        Dim WS As IO.StreamWriter

        Try
            If (stCounter.PlateCounter = 0) Then
                Return
            End If
            '###1030③            UserBas.stCounter.EndTime = DateTime.Now()              ' 基板処理終了時間保存

            WS = New IO.StreamWriter(cTRIM_PRINT_DATA_PLATE, True, System.Text.Encoding.GetEncoding("Shift-JIS"))   ' 基板データ印刷
            If stCounter.PlateCounter = 1 Then
                WS.WriteLine("───────────────────────────────────────────────")
            End If
            WS.WriteLine("No." & stCounter.PlateCounter.ToString & "  Start = " & stCounter.StartTime.ToString("HH:mm:ss") & " End = " & stCounter.EndTime.ToString("HH:mm:ss") & "  Element = " & stCounter.TrimCounter.ToString & " Good = " & stCounter.OK_Counter.ToString & " pcs  Reject = " & stCounter.NG_Counter.ToString & " pcs")
            WS.WriteLine("Initilal Low = " & stCounter.ITLow.ToString & "  High =" & stCounter.ITHigh.ToString & "  Open = " & stCounter.ITOpen.ToString & "         On Trim Low = " & stCounter.FTLow.ToString & "  High = " & stCounter.FTHigh.ToString & "  Open = " & stCounter.FTOpen.ToString)
            WS.Close()
        Catch ex As Exception
            Call Z_PRINT("UserSub.SubstrateEnd() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try

    End Sub

    'V2.0.0.0⑨↓
    ''' <summary>
    ''' 統計データの出力
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub StatisticalPrintDataOut()
        Try
            Dim WS As IO.StreamWriter
            Dim iResCnt As Integer
            Dim JudgeMode As Integer = FINAL_TEST
            Dim dMin As Double, dMax As Double, dAve As Double, dDev As Double
            Dim No As Integer = 0


            iResCnt = GetRCountExceptMeasure()
            If iResCnt > MAX_RES_USER Then
                iResCnt = MAX_RES_USER
            End If

            WS = New IO.StreamWriter(cTRIM_PRINT_DATA_RES, True, System.Text.Encoding.GetEncoding("Shift-JIS"))     ' 抵抗データ印刷データ
            WS.WriteLine("───────────────────────────────────────────────")
            WS.WriteLine("抵抗名　    最小　        最大　        平均　        標準偏差")

            For rn As Integer = 1 To iResCnt
                If UserBas.IsCutResistorIncCharacter(rn) Then
                    No = No + 1
                    Call gObjFrmDistribute.StatisticalDataGet(JudgeMode, No, dMin, dMax, dAve, dDev)
                    WS.WriteLine(stREG(rn).strRNO & vbTab & UserSub.ChangeOverFlow(dMin.ToString(TARGET_DIGIT_DEFINE)).PadLeft(13) & " " & UserSub.ChangeOverFlow(dMax.ToString(TARGET_DIGIT_DEFINE)).PadLeft(13) & " " & UserSub.ChangeOverFlow(dAve.ToString(TARGET_DIGIT_DEFINE)).PadLeft(13) & " " & UserSub.ChangeOverFlow(dDev.ToString(TARGET_DIGIT_DEFINE)).PadLeft(13))
                End If
            Next
            WS.Close()

        Catch ex As Exception
            Call Z_PRINT("UserSub.StatisticalPrintDataOut() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Sub
    'V2.0.0.0⑨↑
    '===============================================================================
    '【機　能】 ロット終了時の印刷処理を行う
    '【引　数】 無し
    '【戻り値】 無し
    '===============================================================================
    Public Sub LotEnd()
        Dim WS As IO.StreamWriter

        Try
            UserBas.stCounter.LotEnd = DateTime.Now()           ' ロット終了時間

            Call StatisticalPrintDataOut()                      ' 統計データ出力'V2.0.0.0⑨

            If IO.File.Exists(cTRIM_PRINT_DATA_END) = True Then ' 毎回ファイルを削除する。
                IO.File.Delete(cTRIM_PRINT_DATA_END)
            End If
            WS = New IO.StreamWriter(cTRIM_PRINT_DATA_END, True, System.Text.Encoding.GetEncoding("Shift-JIS"))   ' ロット終了時データ印刷
            WS.WriteLine("───────────────────────────────────────────────")
            WS.WriteLine("Substrate = " & stCounter.PlateCounter.ToString & "   Element = " & stCounter.Total_TrimCounter.ToString & " pcs  Good = " & stCounter.Total_OK_Counter.ToString & " pcs  Reject = " & stCounter.Total_NG_Counter.ToString & " pcs")
            WS.WriteLine("Initilal Low =  " & stCounter.Total_ITLow.ToString & "  High = " & stCounter.Total_ITHigh.ToString & " Open = " & stCounter.Total_ITOpen.ToString & "         On Trim Low =  " & stCounter.Total_FTLow.ToString & "  High = " & stCounter.Total_FTHigh.ToString & " Open = " & stCounter.Total_FTOpen.ToString)
            WS.WriteLine("───────────────────────────────────────────────")
            WS.WriteLine("設定データ確認時間：　" & stCounter.LotStart.ToString("HH:mm:ss") & " 　終了時間： " & stCounter.LotEnd.ToString("HH:mm:ss") & " 　経過時間：　" & stCounter.LotEnd.Subtract(stCounter.LotStart).Hours.ToString("00") & ":" & stCounter.LotEnd.Subtract(stCounter.LotStart).Minutes.ToString("00") & ":" & stCounter.LotEnd.Subtract(stCounter.LotStart).Seconds.ToString("00"))
            WS.WriteLine("───────────────────────────────────────────────")
            WS.Close()

            UserSub.VariationMesStartDataReset()                'V2.0.0.0② 測定値変動検出機能開始ブロック位置初期化

        Catch ex As Exception
            Call Z_PRINT("UserSub.LotEnd() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try

    End Sub

    Public Function ChangeOverFlow(ByVal sNum As String) As String
        Dim iPos As Integer

        iPos = sNum.IndexOf(".")
        If iPos > 9 Or (iPos = -1 And sNum.Length > 9) Then         ' １００Ｍ以上の桁または小数点が無くて文字列９以上の場合は、０にする。
            'V2.0.0.0⑤            Return ("0.00000")
            Return ("0.0000000")
        Else
            Return (sNum)
        End If

    End Function

    'V1.0.4.3⑨↓
    ''' <summary>
    ''' 増設リレーボード対応、チャンネル変換　ｃｈ７～１６⇒ｃｈ３３～４２
    ''' </summary>
    ''' <param name="ProbeChannel"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function ConvtChannel(ByRef ProbeChannel As Short) As Short
        Try
            'V2.0.0.0⑬↓
            If bRelayBoard Then
                If 9 <= ProbeChannel And ProbeChannel <= 18 Then
                    ConvtChannel = 24 + ProbeChannel
                Else
                    ConvtChannel = ProbeChannel
                End If
            Else
                'V2.0.0.0⑬↑
                If 7 <= ProbeChannel And ProbeChannel <= 16 Then
                    ConvtChannel = 26 + ProbeChannel
                Else
                    ConvtChannel = ProbeChannel
                End If
            End If                                      'V2.0.0.0⑬
        Catch ex As Exception
            Call Z_PRINT("UserSub.ConvertChannel() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function
    'V1.0.4.3⑨↑
    'V1.0.4.3⑩↓
    ''' <summary>
    ''' 測定マーキングモード・ファイナル測定のみの場合もTRIM_MODE_ITTRFTと判定する。
    ''' </summary>
    ''' <returns>True:TRIM_MODE_ITTRFT　False:TRIM_MODE_ITTRFTとTRIM_MODE_MEAS_MARK以外</returns>
    ''' <remarks></remarks>
    Public Function IsTRIM_MODE_ITTRFT() As Boolean
        Try
            'V2.0.0.0②            If (DGL = TRIM_MODE_ITTRFT Or DGL = TRIM_MODE_MEAS_MARK) Then
            If (DGL = TRIM_MODE_ITTRFT Or DGL = TRIM_MODE_MEAS_MARK Or DGL = TRIM_MODE_POWER Or DGL = TRIM_VARIATION_MEAS) Then
                Return (True)
            Else
                Return (False)
            End If

        Catch ex As Exception

        End Try
    End Function
    'V1.0.4.3⑩↑

#Region "印刷処理ｸﾗｽ"
    '===============================================================================
    '【機　能】 印刷処理をおこなうｸﾗｽ
    '【仕　様】 Print ﾒｿｯﾄﾞを呼び出して印刷をおこなう
    '===============================================================================
    Public Class cPrintDocument
        Private Const FILE_ENCODING As String = "shift_jis"
        'Private Const FILE_ENCODING As String = "utf-8"
        Private ReadOnly FONT_SIZE As Font = New Font("ＭＳ ゴシック", 9.0!)
        Private ReadOnly FILEPATH_ARRAY As String() = {cTRIM_PRINT_DATA_HEAD, _
                                                       cTRIM_PRINT_DATA_RES, _
                                                       cTRIM_PRINT_DATA_PLATE, _
                                                       cTRIM_PRINT_DATA_END}
        Private Const MSG_YESNO As String = "ロット情報の印刷を実行します。"
        Private Const MSG_FILE_NOTHING As String = " が見つかりません。"
        Private Const MARGIN_LEFT As Integer = 100      ' 印刷ﾏｰｼﾞﾝ左(1/100 ｲﾝﾁ単位)ﾃﾞﾌｫﾙﾄは100
        Private Const MARGIN_RIGHT As Integer = 100     ' 印刷ﾏｰｼﾞﾝ右(1/100 ｲﾝﾁ単位)ﾃﾞﾌｫﾙﾄは100
        Private Const MARGIN_TOP As Integer = 10        ' 印刷ﾏｰｼﾞﾝ上(1/100 ｲﾝﾁ単位)ﾃﾞﾌｫﾙﾄは100
        Private Const MARGIN_BOTTOM As Integer = 10     ' 印刷ﾏｰｼﾞﾝ下(1/100 ｲﾝﾁ単位)ﾃﾞﾌｫﾙﾄは100

        Private Const DEF_TEXT_BUF As Integer = 1024    ' すべての文字数ﾊﾞｯﾌｧ(足りなくなれば拡張される)
        Private Const DEF_LINE_BUF As Integer = 128     ' 一行の文字数ﾊﾞｯﾌｧ(足りなくなれば拡張される)
        Private m_PrintTextBuf As StringBuilder         ' 印刷する文字すべてを格納する
        Private m_BufIndex As Integer                   ' 現在の文字位置


        ''' <summary>印刷をおこなう</summary>
        ''' <param name="confirmMsgBox">Trueの場合確認ﾒｯｾｰｼﾞを表示する</param>
        Public Sub Print(Optional ByVal confirmMsgBox As Boolean = False)

            If (True = confirmMsgBox) Then ' 確認ﾒｯｾｰｼﾞの表示
                If (MsgBoxResult.No = MsgBox(MSG_YESNO, DirectCast( _
                                             MsgBoxStyle.YesNo + _
                                             MsgBoxStyle.Question, MsgBoxStyle), _
                                             My.Application.Info.Title)) _
                                             Then Exit Sub
            End If

            Try
                Using printer As New PrintDocument
                    m_PrintTextBuf = New StringBuilder(DEF_TEXT_BUF)
                    m_BufIndex = 0

                    For Each path As String In FILEPATH_ARRAY
                        If (True = File.Exists(path)) Then
                            ' ﾌｧｲﾙが存在する場合
                            Using sr As New StreamReader(path, Text.Encoding.GetEncoding(FILE_ENCODING))
                                While (-1 < sr.Peek()) ' 使用できる文字がなくなるまで継続
                                    m_PrintTextBuf.Append(sr.ReadLine() & vbLf) ' 一行づつ追加する
                                End While
                            End Using
                        Else
                            ' ﾌｧｲﾙが存在しない旨を追加する
                            m_PrintTextBuf.Append(vbLf & path & MSG_FILE_NOTHING & vbLf & vbLf)
                        End If
                    Next

                    With printer.DefaultPageSettings
                        .Margins = New Margins(MARGIN_LEFT, MARGIN_RIGHT, MARGIN_TOP, MARGIN_BOTTOM)
                        .Landscape = False ' 用紙の向き(縦)
                    End With
                    AddHandler printer.PrintPage, AddressOf m_Printer_PrintPage
                    Call printer.Print() ' m_Printer_PrintPage() ｲﾍﾞﾝﾄが発生する
                End Using

            Catch ex As Exception
                Call MsgBox(ex.ToString())
            End Try

        End Sub

        ''' <summary>文字を書き出す</summary>
        ''' <remarks>一行ごとに先頭座標を指定して描画する</remarks>
        Private Sub m_Printer_PrintPage(ByVal sender As Object, ByVal e As PrintPageEventArgs)
            Dim x As Integer = e.MarginBounds.Left ' 印刷開始初期位置
            Dim y As Integer = e.MarginBounds.Top  ' 印刷開始初期位置

            Try
                ' 現在のﾍﾟｰｼﾞにおさまる かつ 文字をすべて書き出していない場合継続
                While ((y + FONT_SIZE.Height) < e.MarginBounds.Bottom) AndAlso _
                        (m_BufIndex < m_PrintTextBuf.Length)
                    Dim lineBuf As New StringBuilder(DEF_LINE_BUF) ' 行ﾊﾞｯﾌｧ

                    While True
                        If (m_PrintTextBuf.Length <= m_BufIndex) OrElse _
                            (vbLf = m_PrintTextBuf.Chars(m_BufIndex)) Then
                            ' 文字をすべて書き出した または 改行ｺｰﾄﾞの場合
                            m_BufIndex += 1
                            Exit While
                        End If

                        lineBuf.Append(m_PrintTextBuf.Chars(m_BufIndex)) ' 一文字追加する
                        If ((e.MarginBounds.Width) < _
                            (e.Graphics.MeasureString(lineBuf.ToString(), FONT_SIZE).Width)) Then
                            ' 印刷幅におさまらない場合、一文字削除する
                            lineBuf.Remove(lineBuf.Length - 1, 1)
                            Exit While
                        End If

                        m_BufIndex += 1
                    End While

                    ' 一行分書き出す
                    'Debug.Print(lineBuf.ToString())
                    e.Graphics.DrawString(lineBuf.ToString(), FONT_SIZE, Brushes.Black, x, y)
                    y += FONT_SIZE.GetHeight(e.Graphics) ' 次の行の印刷位置へ
                End While

                If (m_PrintTextBuf.Length <= m_BufIndex) Then
                    ' 文字をすべて書き出した場合
                    e.HasMorePages = False
                    'Debug.Print((m_PrintTextBuf.Capacity).ToString()) ' DEF_TEXT_BUF のｻｲｽﾞ調整
                    m_PrintTextBuf = Nothing
                    m_BufIndex = 0
                Else
                    ' この設定により再度 m_Printer_PrintPage() ｲﾍﾞﾝﾄが発生する
                    e.HasMorePages = True ' 次のﾍﾟｰｼﾞへ
                End If

            Catch ex As Exception
                Call MsgBox(ex.ToString())
            End Try
        End Sub

    End Class
#End Region
    ''' <summary>
    ''' 自動運転時のオフセットパラメータ反映処理（テーブル位置、ビーム位置、プローブ接触位置）
    ''' </summary>
    ''' <param name="AutoDataFileFullPath"></param>
    ''' <param name="iAutoDataFileNum"></param>
    ''' <returns>正常終了：cFRS_NORMAL　異常終了：データの番号</returns>
    ''' <remarks></remarks>
    Public Function SetOffSetDataToAutoOperationData(ByVal AutoDataFileFullPath() As String, ByVal iAutoDataFileNum As Short) As Short

        Dim r As Short
        Dim stPLT_Local As PLATE_DATA                          ' プレートデータ

        If iAutoDataFileNum <= 0 Then
            Return (True)
        End If

        gsDataFileName = AutoDataFileFullPath(0)                     ' データファイル名設定

        r = rData_load()                                            ' データファイルリード
        If (r <> 0) Then                                            ' データファイル　ロードエラー
            Return (1)
        End If

        stPLT_Local.z_xoff = stPLT.z_xoff                           ' テーブル位置オフセット　トリムポジションオフセットX(mm)
        stPLT_Local.z_yoff = stPLT.z_yoff                           ' テーブル位置オフセット　トリムポジションオフセットY(mm)

        stPLT_Local.BPOX = stPLT.BPOX                               ' ビーム位置オフセット　BP Offset X(mm)
        stPLT_Local.BPOY = stPLT.BPOY                               ' ビーム位置オフセット　BP Offset Y(mm)

        stPLT_Local.Z_ZON = stPLT.Z_ZON                             ' Z PROBE ON 位置(mm)

        For Cnt As Integer = 1 To (iAutoDataFileNum - 1)
            gsDataFileName = AutoDataFileFullPath(Cnt)
            r = rData_load()                                            ' データファイルリード
            If (r <> 0) Then                                            ' データファイル　ロードエラー
                Return (Cnt + 1)
            End If
            stPLT.z_xoff = stPLT_Local.z_xoff       ' テーブル位置オフセット　トリムポジションオフセットX(mm)
            stPLT.z_yoff = stPLT_Local.z_yoff       ' テーブル位置オフセット　トリムポジションオフセットY(mm)
            stPLT.BPOX = stPLT_Local.BPOX           ' ビーム位置オフセット　BP Offset X(mm)
            stPLT.BPOY = stPLT_Local.BPOY           ' ビーム位置オフセット　BP Offset Y(mm)
            stPLT.Z_ZON = stPLT_Local.Z_ZON         ' Z PROBE ON 位置(mm)

            If rData_save(gsDataFileName) <> cFRS_NORMAL Then       ' データファイルセーブ
                Return (Cnt + 1)
            End If
        Next

        Return (cFRS_NORMAL)

    End Function

    'V1.2.0.0③↓
    ''' <summary>
    ''' パターン認識結果格納領域の初期化（初期状態はＯＫ）
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub InitResPatternmatchResult()
        Try
            Dim iResNo As Integer
            For iResNo = 1 To MAXRNO Step 1
                stREG(iResNo).bPattern = True
            Next
        Catch ex As Exception
            Call Z_PRINT("UserSub.InitResPatternmatchResult() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Sub
    'V1.2.0.0③↑
    'V1.2.0.0②↓
    Public Function MarkingForChipMode(ByVal rn As Short, ByVal Result As Boolean) As Short
        Try
            Dim rNo As Integer
            Dim cn As Integer
            Dim dOffSetX As Double, dOffSetY As Double
            Dim Rtn As Short = cFRS_NORMAL              ' 関数戻値

            If Not UserSub.IsTrimType3() And Not UserSub.IsTrimType4() Then     ' 温度センサー'V2.0.0.0①sTrimType4()追加
                Return (Rtn)
            End If

            ' 第１抵抗第１カットのスタート座標から現在の抵抗の第１カットのスタート座標までの距離を求める。
            dOffSetX = stREG(rn).STCUT(1).dblSTX - stREG(1).STCUT(1).dblSTX
            dOffSetY = stREG(rn).STCUT(1).dblSTY - stREG(1).STCUT(1).dblSTY

            'V2.0.0.0⑩↓
            If UserSub.IsTrimType3() Then
                rn = UserSub.GetTopResNoinCircuit(rn)
            End If
            'V2.0.0.0⑩↑

            'V1.2.0.2↓
            For rNo = 1 To stPLT.RCount Step 1
                If IsCutResistor(rNo) Then
                    dOffSetX = stREG(rn).STCUT(1).dblSTX - stREG(rNo).STCUT(1).dblSTX
                    dOffSetY = stREG(rn).STCUT(1).dblSTY - stREG(rNo).STCUT(1).dblSTY
                    Exit For
                End If
            Next
            'V1.2.0.2↑

            'V1.2.0.2            For rNo = 1 To MAXRNO Step 1
            For rNo = 1 To stPLT.RCount Step 1                  'V1.2.0.2
                If Result Then                                  ' ＯＫ判定の時
                    If stREG(rNo).intSLP <> SLP_OK_MARK Then    ' ＯＫマーク以外はスキップ
                        Continue For
                    End If
                Else                                            ' ＮＧ判定の時
                    If stREG(rNo).intSLP <> SLP_NG_MARK Then    ' ＮＧマーク以外はスキップ
                        Continue For
                    End If
                End If
                ' カット位置を現在の抵抗の位置に合わせてオフセットさせる。
                For cn = 1 To stREG(rNo).intTNN Step 1
                    stREG(rNo).STCUT(cn).dblSTX = stREG(rNo).STCUT(cn).dblSTX + dOffSetX
                    stREG(rNo).STCUT(cn).dblSTY = stREG(rNo).STCUT(cn).dblSTY + dOffSetY
                Next
                Rtn = VTrim_One(rNo, stREG(rNo).dblNOM)          ' 1抵抗分トリミングを行う
                ' カット位置を元に戻す。
                For cn = 1 To stREG(rNo).intTNN Step 1
                    stREG(rNo).STCUT(cn).dblSTX = stREG(rNo).STCUT(cn).dblSTX - dOffSetX
                    stREG(rNo).STCUT(cn).dblSTY = stREG(rNo).STCUT(cn).dblSTY - dOffSetY
                Next
            Next

            Return (Rtn)

        Catch ex As Exception
            Call Z_PRINT("UserSub.MarkingForChipMode() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function
    'V1.2.0.0②↑

    'V2.0.0.0②↓
    ''' <summary>
    ''' ログデータからFT値の取得
    ''' </summary>
    ''' <param name="sLotNumber">ロット番号</param>
    ''' <param name="PlateNumber">基板番号</param>
    ''' <param name="BlockX">ブロックＸ番号</param>
    ''' <param name="BlockY">ブロックＹ番号</param>
    ''' <param name="ResCounter">検査して求めたデータ数</param>
    ''' <param name="Target">ＦＴ値（配列）</param>
    ''' <returns></returns>
    ''' <remarks></remarks>    
    Public Function GetTargerDataFromLogFile(ByVal sLotNumber As String, ByVal PlateNumber As Integer, ByVal BlockX As Integer, ByVal BlockY As Integer, ByRef ResCounter As Integer, ByRef Target() As Double) As Boolean

        Dim sPath As String
        Dim sInpData As String
        Dim splt() As String
        Dim ITEM_LOT_NUM As Integer = 3
        Dim ITEM_PLATE_NUM As Integer = 4
        Dim ITEM_BLOCKX_NUM As Integer = 5
        Dim ITEM_BLOCKY_NUM As Integer = 6
        Dim ITEM_FT_NUM As Integer = 12
        Dim itemcnt As Integer
        Dim sLot As String
        Dim nPlate As Integer
        Dim nBlockX As Integer
        Dim nBlockY As Integer
        Dim SearchDir As String
        Dim SearchFile As String

        Try

            SearchDir = "C:\TRIMDATA\LOG"                                   'サーチするフォルダ指定
            SearchFile = "*" + sLotNumber.Trim() + ".CSV"                   'サーチするファイルの検索キー(ロット番号が含まれているCSVファイル)

            '条件が一致するファイル名の取得実行 「検索対象は指定フォルダのみ」サブフォルダは除外.サブを含める場合は最後の引数を「SearchOption.AllDirectories」に変更
            Dim files() As String = System.IO.Directory.GetFiles(SearchDir, SearchFile, SearchOption.TopDirectoryOnly)

            ' 取得したすべてのファイルを最終書き込み日時順でソートする)
            Array.Sort(Of String)(files, AddressOf CompareLastWriteTime)
            If (files.Length = 0) Then
                Return (False)
            End If
            sPath = files(files.Length - 1)
            Using sr As New StreamReader(sPath, Encoding.GetEncoding("Shift_JIS"))

                'タイトル読み飛ばし
                sInpData = sr.ReadLine()

                itemcnt = 0
                '最終行まで１行ごとにファイル読込み
                Do While (False = sr.EndOfStream)
                    sInpData = sr.ReadLine()                                ' １行読込み
                    splt = sInpData.Split(","c)                             ' カンマ区切りで分割

                    sLot = splt(ITEM_LOT_NUM)                               ' ロット番号の取得 
                    nPlate = splt(ITEM_PLATE_NUM)                           ' 基板番号の取得 
                    nBlockX = splt(ITEM_BLOCKX_NUM)                         ' Block番号Xの取得 
                    nBlockY = splt(ITEM_BLOCKY_NUM)                         ' Block番号Yの取得 

                    'ロット番号、基板番号、Block番号X、Yが一致するデータのみ抽出 
                    If ((sLot = sLotNumber) AndAlso (nPlate = PlateNumber) AndAlso (nBlockX = BlockX) AndAlso (nBlockY = BlockY)) Then
                        Target(itemcnt) = splt(ITEM_FT_NUM)              ' FT結果の取得 
                        itemcnt = itemcnt + 1
                        '検出した項目数の設定
                        ResCounter = itemcnt
                    Else
                        itemcnt = 0
                    End If
                Loop
            End Using

            Return (True)
        Catch ex As Exception
            Call Z_PRINT("UserSub.GetTargerDataFromLogFile() TRAP ERROR = " & ex.Message & vbCrLf)
            Return (False)
        End Try
    End Function

    ' 二つのファイルの最終書き込み日時を取得して比較するメソッド
    Private Function CompareLastWriteTime(ByVal fileX As String, ByVal fileY As String) As Integer
        Return DateTime.Compare(File.GetLastWriteTime(fileX), File.GetLastWriteTime(fileY))
    End Function

    ' 測定値変動検出機能
    Public bVariationMesStep As Boolean = True
    Public gVariationMeasPlateStartNo As Integer = 1
    Public gVariationMeasBlockXStartNo As Integer = 1
    Public gVariationMeasBlockYStartNo As Integer = 1
    Public dMeasVariationNOM(MAXRNO) As Double                  ' トリミング後ＦＴ値
    Public dMeasVariationDev(MAX_RES_USER) As Double            ' 変化量

    ''' <summary>
    ''' 測定値変動検出機能開始ブロック位置初期化
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub VariationMesStartDataReset()
        Try
            gVariationMeasPlateStartNo = 1
            gVariationMeasBlockXStartNo = 1
            gVariationMeasBlockYStartNo = 1
            bVariationMesStep = True
        Catch ex As Exception
            Call Z_PRINT("UserSub.VariationMesStartDataReset() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Sub
    Public Function SetTarrgetOnVariationMeas() As Boolean
        Try
            Dim bRtn As Boolean
            Dim ResCounter As Integer
            Dim Target(MAXRNO) As Double
            Dim rno As Integer

            bRtn = GetTargerDataFromLogFile(stUserData.sLotNumber, stCounter.PlateCounter, stCounter.BlockCntX, stCounter.BlockCntY, ResCounter, Target)
            If Not bRtn Then
                Call DebugLogOut("測定値変動検出 目標値設定エラー LOT=[" & stUserData.sLotNumber & "] PLATE=[" & stCounter.PlateCounter.ToString & "]X=[" & stCounter.BlockCntX.ToString & "]Y=[" & stCounter.BlockCntY.ToString & "]")
                Return (False)
            End If
            Dim Rcnt As Integer = UserBas.GetRCountExceptMeasure()

            rno = 0
            For rn As Integer = 1 To stPLT.RCount
                If UserModule.IsCutResistor(rn) Then
                    If rno < ResCounter Then
                        dMeasVariationNOM(rn) = Target(rno)
                        rno = rno + 1
                    Else
                        Call Z_PRINT("測定値変動検出 目標値データが有りません LOT=[" & stUserData.sLotNumber & "] PLATE=[" & stCounter.PlateCounter.ToString & "]X=[" & stCounter.BlockCntX.ToString & "]Y=[" & stCounter.BlockCntY.ToString & "]RES=[" & rn.ToString & "]")
                        Call DebugLogOut("測定値変動検出 目標値設定エラー LOT=[" & stUserData.sLotNumber & "] PLATE=[" & stCounter.PlateCounter.ToString & "]X=[" & stCounter.BlockCntX.ToString & "]Y=[" & stCounter.BlockCntY.ToString & "]]RES=[" & rn.ToString & "]")
                    End If
                End If
            Next
            Return (True)
        Catch ex As Exception
            Call Z_PRINT("UserSub.SetTarrgetOnVariationMeas() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    Public Function VariationMeasJudge(ByVal rn As Short, ByVal dblMx As Double) As Boolean
        Try
            ' トリミング誤差絶対値　＝　（　トリミング値　－　トリミング時のＴＦ値　）／トリミング時のＴＦ値　* 10^6
            dMeasVariationDev(rn) = FNDEVP(dblMx, dMeasVariationNOM(rn))

            If dMeasVariationDev(rn) > Math.Abs(stUserData.dVariation) Then
                Return (False)
            Else
                Return (True)
            End If

        Catch ex As Exception
            Call Z_PRINT("UserSub.VariationMeasJudge() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    'V2.0.0.0②↑

    'V2.0.0.0⑩↓
    ''' <summary>
    ''' サーキット総数のカウント
    ''' </summary>
    ''' <param name="stPlate"></param>
    ''' <param name="stRegData"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetCircuitSum(ByVal stPlate As PLATE_DATA, ByRef stRegData As Reg_Info()) As Integer
        Try
            Dim iResCnt As Integer = 0
            Dim iCircuit As Integer = -1

            For rn As Integer = 1 To stPlate.RCount
                If UserModule.IsCutResistor(stRegData, rn) Then
                    If iCircuit <> stRegData(rn).intCircuitNo Then
                        iResCnt = iResCnt + 1
                    End If
                    iCircuit = stRegData(rn).intCircuitNo
                End If
            Next
            Return (iResCnt)

        Catch ex As Exception
            Call Z_PRINT("UserSub.GetCircuitSum() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    ''' <summary>
    ''' サーキット内の抵抗数のカウント
    ''' </summary>
    ''' <param name="stRegData">抵抗データ構造体</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function CircuitResistorCount(ByVal stPlate As PLATE_DATA, ByRef stRegData As Reg_Info()) As Integer
        Try
            Dim iResCnt As Integer = 0
            Dim iCircuit As Integer = -1

            For rn As Integer = 1 To stPlate.RCount
                If UserModule.IsCutResistor(stRegData, rn) Then
                    If iCircuit < 0 Then
                        iCircuit = stRegData(rn).intCircuitNo
                    End If
                    If stRegData(rn).intCircuitNo <> iCircuit Then
                        Return (iResCnt)
                    End If
                    iResCnt = iResCnt + 1
                End If
            Next
            Return (iResCnt)

        Catch ex As Exception
            Call Z_PRINT("UserSub.CircuitResistorCount() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    ''' <summary>
    ''' サーキット内の抵抗数のカウント
    ''' </summary>
    ''' <returns>同一サーキット内抵抗数</returns>
    ''' <remarks></remarks>
    Public Function CircuitResistorCount() As Integer
        Try
            Return (CircuitResistorCount(stPLT, stREG))

        Catch ex As Exception
            Call Z_PRINT("UserSub.CircuitResistorCount() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    ''' <summary>
    ''' サーキットの最後の抵抗かをチェックする。
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsCheckCircuitEnd(ByVal rn As Short) As Boolean
        Try
            Dim iCircuit As Integer = stREG(rn).intCircuitNo

            For i As Integer = (rn + 1) To stPLT.RCount
                If UserModule.IsCutResistor(i) Then
                    If iCircuit = stREG(i).intCircuitNo Then    ' 後に同じ抵抗が出て来たら最後では無い
                        Return (False)
                    Else
                        Return (True)
                    End If
                End If
            Next

            Return (True)

        Catch ex As Exception
            Call Z_PRINT("UserSub.IsCheckCircuitEnd() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try

    End Function

    ''' <summary>
    ''' 同じサーキット番号の先頭の抵抗番号を求める。
    ''' </summary>
    ''' <param name="rn"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetTopResNoinCircuit(ByVal rn As Short) As Short
        Try
            Dim iCircuit As Integer = stREG(rn).intCircuitNo
            Dim TopResNo As Short = rn
            Dim ResNo As Short

            For ResNo = TopResNo To 1 Step -1
                If UserModule.IsCutResistor(ResNo) Then
                    If iCircuit = stREG(ResNo).intCircuitNo Then    ' 前に同じサーキット番号が出て来たら
                        TopResNo = ResNo
                    End If
                End If
            Next

            Return (TopResNo)

        Catch ex As Exception
            Call Z_PRINT("UserSub.GetTopResNoinCircuit() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    ''' <summary>
    ''' サーキット内で何番目の抵抗かを求める
    ''' </summary>
    ''' <param name="stRegData"></param>
    ''' <param name="rn"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetResNumberInCircuit(ByRef stRegData As Reg_Info(), ByVal rn As Short) As Integer
        Try

            Dim iCircuit As Integer = stRegData(rn).intCircuitNo
            Dim iNumber As Integer = 0

            For i As Integer = 1 To rn
                If UserModule.IsCutResistor(stRegData, i) Then
                    If iCircuit = stRegData(i).intCircuitNo Then    ' 同じサーキット番号
                        iNumber = iNumber + 1
                    End If
                End If
            Next

            Return (iNumber)

        Catch ex As Exception
            Call Z_PRINT("UserSub.GetResNumberInCircuit() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    ''' <summary>
    ''' サーキット内で何番目の抵抗かを求める
    ''' </summary>
    ''' <param name="rn"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetResNumberInCircuit(ByVal rn As Short) As Integer
        Try

            Return (GetResNumberInCircuit(stREG, rn))

        Catch ex As Exception
            Call Z_PRINT("UserSub.GetResNumberInCircuit() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function

    ''' <summary>
    ''' サーキット内の順番の抵抗番号を求める
    ''' </summary>
    ''' <param name="stPlate"></param>
    ''' <param name="stRegData"></param>
    ''' <param name="Circuit"></param>
    ''' <param name="No"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetRNumByCircuit(ByVal stPlate As PLATE_DATA, ByRef stRegData As Reg_Info(), ByVal Circuit As Short, ByVal No As Short) As Integer
        Try
            Dim iResCnt As Integer = 0
            Dim iCircuit As Integer = -1

            For rno As Integer = 1 To stPlate.RCount
                If UserModule.IsCutResistor(stRegData, rno) Then
                    If stRegData(rno).intCircuitNo = Circuit Then
                        iResCnt = iResCnt + 1
                        If iResCnt = No Then
                            Return (rno)
                        End If
                    End If
                End If
            Next
        Catch ex As Exception
            Call Z_PRINT("UserSub.GetRNumByCircuit() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function
    Public Function GetRNumByCircuit(ByVal Circuit As Short, ByVal No As Short) As Integer
        Try
            Return (GetRNumByCircuit(stPLT, stREG, Circuit, No))
        Catch ex As Exception
            Call Z_PRINT("UserSub.GetRNumByCircuit() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Function
    'V2.0.0.0⑩↑

    'V2.0.0.0⑭↓
    ''' <summary>
    ''' クランプ吸着変更
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub ClampVacumeChange()
        Try
            Dim r As Short

            Select Case (stUserData.intClampVacume)
                Case CLAMP_VACCUME_USE
                Case CLAMP_ONLY_USE
                    Call Form1.System1.AbsVaccume(gSysPrm, 0, giAppMode, 0)
                    Call Form1.System1.Adsorption(gSysPrm, 0)
                Case VACCUME_ONLY_USE
                    r = Form1.System1.ClampCtrl(gSysPrm, 0, 0, False)                 ' クランプ/吸着OFF
                    If (r = cFRS_NORMAL) Then
                        'Call Sub_ATLDSET(COM_STS_CLAMP_ON, 0)                       ' ローダー出力(ON=載物台ｸﾗﾝﾌﾟ開,OFF=なし)
                        'gbClampOpen = False
                    Else
                        Call Z_PRINT("クランプ開エラーが発生しました。。" & vbCrLf)
                    End If
                Case Else
                    Throw New Exception("Case " & stUserData.intClampVacume & ": Nothing")
            End Select
        Catch ex As Exception
            Call Z_PRINT("UserSub.ClampVacumeChange() TRAP ERROR = " & ex.Message & vbCrLf)
        End Try
    End Sub
    'V2.0.0.0⑭↑

End Module

'=============================== END OF FILE ===============================